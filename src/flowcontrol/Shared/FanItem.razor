@inject IJSRuntime JSRuntime

@using Models
@using Pages
<div class="fan-page__item">
    <div class="fan-module">
        <div class="fan-module__icon">
            <div class="fan-module__header">
                <img src="Content/img/fan.svg" alt="Fan" class="fan-icon">
                <div class="fan-module__headertext">
                    <span>Bottom Rad @Fan.Speed</span>
                    <!-- <span style="font-size: 1.1em;font-weight:normal;">2234 rpm</span> -->
                </div>
            </div>
            <div class="fan-module__controls">
                <div class="fan-module__row">
                    <button @onclick="UpdateFan" class="fan-module__controls__button @(Fan.Auto != 0 ? "fan-module__controls__button--active": "")">Auto</button>
                    <div class="fan-module__slider">
                        <input type="range"
                            min="0"
                            max="100"
                            step="1"
                            class="column slider"
                            value="@Fan.Speed"
                            @onchange="UpdateFanSpeed"/>
                    </div>
                </div>
            </div>
        </div>
        <div class="fan-module__info">
            <canvas class="rpm-chart" id="myChart"></canvas>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public Fan Fan { get; set; }
    private void UpdateFan()
    {
        Fan.Auto = Fan.Auto == 0 ? 1 : 0;

        var jsRequest = new JSRequest();
        jsRequest.Url = "/datacontroller/postdata";
        jsRequest.PostData = Fan;
        var dotNetReference = DotNetObjectReference.Create(this);
        JSRuntime.InvokeVoidAsync("MessageRouter.Post", jsRequest.ToJson(), dotNetReference);
    }
    private void UpdateFanSpeed(ChangeEventArgs e)
    {
        Fan.Speed = int.Parse(e.Value.ToString());
        var jsRequest = new JSRequest();
        jsRequest.Url = "/datacontroller/postfanspeed";
        jsRequest.PostData = Fan;
        var dotNetReference = DotNetObjectReference.Create(this);
        JSRuntime.InvokeVoidAsync("MessageRouter.Post", jsRequest.ToJson(), dotNetReference);
    }
}